<chapter id="quickstart">
<title>Quick Start</title>
<para>
One can experiment with the PBC libraryp without writing a single line of C.
The binary <filename>pbc/pbc</filename> should be present after
PBC successfully compiles.
</para>
<para>
The <command>pbc</command> program is an interactive calculator
that can be used to test the PBC library,
and also experiment with pairings in general.
</para>
<section id="pbcintro">
<title>Playing with Pairings</title>
<para>
We shall use the following notation. For our purposes,
the pairing is a bilinear map from two cyclic groups,
G1 and G2 to a third group GT, where each group has prime order r.
</para>
<para>
Run <filename>pbc/pbc</filename> and type:
</para>
<screen>
g=rnd(G1)
g
</screen>
<para>
The first line generates a random element g of the group G1,
while the second prints out the value of g. (The syntax was influenced
by <filename>bc</filename>, an arbitrary precision calculator.)
Next, enter:
</para>
<screen>
h=rnd(G2)
h
</screen>
<para>
This assigns h to a random element of the group G2. Actually, the
default pairing <filename>pbc</filename> uses is symmetric so G1 and G2
are in fact the same group, but in general they are distinct. To compute
the pairing applied to g and h, type:
</para>
<screen>
pairing(g,h)
</screen>
<para>
The order of both g and h is r. Let's generate two random numbers between
1 and r:
</para>
<screen>
a=rnd(Zr)
b=rnd(Zr)
</screen>
<para>
By bilinearity, the resulting output of both of these lines
should be identical:
</para>
<screen>
pairing(g^a,h^b)
pairing(g,h)^(a*b)
</screen>
<para>
This program has <link linkend="sect.pbc">other features</link>,
but the commands shown here should be enough to quickly and interactively
experiment with many pairing-based cryptosystems using real numbers.
</para>
</section>
</chapter>
